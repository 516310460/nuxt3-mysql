{
  "version": 3,
  "sources": ["../../../../node_modules/ohmyfetch/dist/chunks/fetch.mjs", "../../../../node_modules/ohmyfetch/dist/index.mjs"],
  "sourcesContent": ["import destr from 'destr';\nimport { withBase, withQuery } from 'ufo';\n\nclass FetchError extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = \"FetchError\";\n  }\n}\nfunction createFetchError(request, error, response) {\n  let message = \"\";\n  if (request && response) {\n    message = `${response.status} ${response.statusText} (${request.toString()})`;\n  }\n  if (error) {\n    message = `${error.message} (${message})`;\n  }\n  const fetchError = new FetchError(message);\n  Object.defineProperty(fetchError, \"request\", { get() {\n    return request;\n  } });\n  Object.defineProperty(fetchError, \"response\", { get() {\n    return response;\n  } });\n  Object.defineProperty(fetchError, \"data\", { get() {\n    return response && response._data;\n  } });\n  return fetchError;\n}\n\nconst payloadMethods = new Set(Object.freeze([\"PATCH\", \"POST\", \"PUT\", \"DELETE\"]));\nfunction isPayloadMethod(method = \"GET\") {\n  return payloadMethods.has(method.toUpperCase());\n}\nfunction isJSONSerializable(val) {\n  if (val === void 0) {\n    return false;\n  }\n  const t = typeof val;\n  if (t === \"string\" || t === \"number\" || t === \"boolean\" || t === null) {\n    return true;\n  }\n  if (t !== \"object\") {\n    return false;\n  }\n  if (Array.isArray(val)) {\n    return true;\n  }\n  return val.constructor && val.constructor.name === \"Object\" || typeof val.toJSON === \"function\";\n}\nconst textTypes = /* @__PURE__ */ new Set([\n  \"image/svg\",\n  \"application/xml\",\n  \"application/xhtml\",\n  \"application/html\"\n]);\nconst JSON_RE = /^application\\/(?:[\\w!#$%&*`\\-.^~]*\\+)?json(;.+)?$/i;\nfunction detectResponseType(_contentType = \"\") {\n  if (!_contentType) {\n    return \"json\";\n  }\n  const contentType = _contentType.split(\";\").shift();\n  if (JSON_RE.test(contentType)) {\n    return \"json\";\n  }\n  if (textTypes.has(contentType) || contentType.startsWith(\"text/\")) {\n    return \"text\";\n  }\n  return \"blob\";\n}\n\nconst retryStatusCodes = /* @__PURE__ */ new Set([\n  408,\n  409,\n  425,\n  429,\n  500,\n  502,\n  503,\n  504\n]);\nfunction createFetch(globalOptions) {\n  const { fetch, Headers } = globalOptions;\n  function onError(ctx) {\n    if (ctx.options.retry !== false) {\n      const retries = typeof ctx.options.retry === \"number\" ? ctx.options.retry : isPayloadMethod(ctx.options.method) ? 0 : 1;\n      const responseCode = ctx.response && ctx.response.status || 500;\n      if (retries > 0 && retryStatusCodes.has(responseCode)) {\n        return $fetchRaw(ctx.request, {\n          ...ctx.options,\n          retry: retries - 1\n        });\n      }\n    }\n    const err = createFetchError(ctx.request, ctx.error, ctx.response);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(err, $fetchRaw);\n    }\n    throw err;\n  }\n  const $fetchRaw = async function $fetchRaw2(_request, _opts = {}) {\n    const ctx = {\n      request: _request,\n      options: { ...globalOptions.defaults, ..._opts },\n      response: void 0,\n      error: void 0\n    };\n    if (ctx.options.onRequest) {\n      await ctx.options.onRequest(ctx);\n    }\n    if (typeof ctx.request === \"string\") {\n      if (ctx.options.baseURL) {\n        ctx.request = withBase(ctx.request, ctx.options.baseURL);\n      }\n      if (ctx.options.params) {\n        ctx.request = withQuery(ctx.request, ctx.options.params);\n      }\n      if (ctx.options.body && isPayloadMethod(ctx.options.method)) {\n        if (isJSONSerializable(ctx.options.body)) {\n          ctx.options.body = typeof ctx.options.body === \"string\" ? ctx.options.body : JSON.stringify(ctx.options.body);\n          ctx.options.headers = new Headers(ctx.options.headers);\n          if (!ctx.options.headers.has(\"content-type\")) {\n            ctx.options.headers.set(\"content-type\", \"application/json\");\n          }\n          if (!ctx.options.headers.has(\"accept\")) {\n            ctx.options.headers.set(\"accept\", \"application/json\");\n          }\n        }\n      }\n    }\n    ctx.response = await fetch(ctx.request, ctx.options).catch(async (error) => {\n      ctx.error = error;\n      if (ctx.options.onRequestError) {\n        await ctx.options.onRequestError(ctx);\n      }\n      return onError(ctx);\n    });\n    const responseType = (ctx.options.parseResponse ? \"json\" : ctx.options.responseType) || detectResponseType(ctx.response.headers.get(\"content-type\") || \"\");\n    if (responseType === \"json\") {\n      const data = await ctx.response.text();\n      const parseFn = ctx.options.parseResponse || destr;\n      ctx.response._data = parseFn(data);\n    } else {\n      ctx.response._data = await ctx.response[responseType]();\n    }\n    if (ctx.options.onResponse) {\n      await ctx.options.onResponse(ctx);\n    }\n    if (!ctx.response.ok) {\n      if (ctx.options.onResponseError) {\n        await ctx.options.onResponseError(ctx);\n      }\n    }\n    return ctx.response.ok ? ctx.response : onError(ctx);\n  };\n  const $fetch = function $fetch2(request, opts) {\n    return $fetchRaw(request, opts).then((r) => r._data);\n  };\n  $fetch.raw = $fetchRaw;\n  $fetch.create = (defaultOptions = {}) => createFetch({\n    ...globalOptions,\n    defaults: {\n      ...globalOptions.defaults,\n      ...defaultOptions\n    }\n  });\n  return $fetch;\n}\n\nexport { FetchError as F, createFetchError as a, createFetch as c };\n", "import { c as createFetch } from './chunks/fetch.mjs';\nexport { F as FetchError, c as createFetch, a as createFetchError } from './chunks/fetch.mjs';\nimport 'destr';\nimport 'ufo';\n\nconst _globalThis = function() {\n  if (typeof globalThis !== \"undefined\") {\n    return globalThis;\n  }\n  if (typeof self !== \"undefined\") {\n    return self;\n  }\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n  if (typeof global !== \"undefined\") {\n    return global;\n  }\n  throw new Error(\"unable to locate global object\");\n}();\nconst fetch = _globalThis.fetch || (() => Promise.reject(new Error(\"[ohmyfetch] global.fetch is not supported!\")));\nconst Headers = _globalThis.Headers;\nconst $fetch = createFetch({ fetch, Headers });\n\nexport { $fetch, Headers, fetch };\n"],
  "mappings": "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",
  "names": ["fetch", "Headers", "$fetch", "$fetch2"]
}
